<launch>
<!-- ============ Arguments ============ -->
  <!-- General -->
  <arg name="input_namespace" default="/data"/> 
  <arg name="use_rio" default="false"/>
  <arg name="use_detectron" default="false"/>
  <arg name="visualize" default="true"/>
  <arg name="save_map_path_when_finished" default=""/>

  <!-- Sim Time -->
  <arg name="use_sim_time" default="false"/>
  <arg name="sim_speed_multiplier" default="5" />
  <arg name="clock_refresh_rate" default="50" />
  <param name="use_sim_time" value="$(arg use_sim_time)" />
  <!-- Flat Dataset args -->
  <arg name="base_path" default="/home/ioannis/datasets/large_flat/run1"/> 
  <arg name="play_rate" default="1"/>  <!-- Realtime factor -->
  <arg name="wait_time" default="0"/>  <!-- s -->
    <arg name="data_player_refresh_rate" default="100" />
  <arg name="global_frame_name" default="world"/>
  <arg name="sensor_frame_name" default="camera"/>
  <arg name="use_tf_transforms" default="true"/>
  <!-- noise args -->
  <arg name="use_noise" default="false"/>
  <arg name="drift_type" default="none"/>

  <!-- Rio Dataset args -->
  <arg name="data_path" default="/home/ioannis/datasets/3RScan"/> 
  <arg name="scene_id" default="0"/> <!-- 0: 0-3, 1: 0-3, 2: 0-1 -->
  <arg name="scan_id" default="0"/>
  <arg name="rio_play_rate" default="20"/>  <!-- Hz -->

  <!-- Mapper -->
  <arg name="config" default="flat_groundtruth"/> <!-- flat_groundtruth, flat_detectron, rio_groundtruth, rio_detectron, single_tsdf -->
  <arg name="shutdown_when_finished" default="true"/>

  <!-- Save/Load maps -->
  <arg name="load_map" default = "false"/>
  <arg name="load_file" default = "/home/ioannis/Documents/PanopticMapping/Data/maps/flat/run1.panmap"/>
  <arg name="save_trajectory_on_finish" default="/home/ioannis/datasets/trajectory.in"/>
  <arg name="save_voxgraph_trajectory_on_finish" default="/home/ioannis/datasets/voxg_traj.bag"/>
  <arg name="generated_path_file_path" default=""/>
  <!-- debug -->
  <arg name="debug_mode"
       default="false"
       doc="Run the mapper in debug mode." />
  <arg unless="$(arg debug_mode)" name="launch_prefix" value="" />
  <arg if="$(arg debug_mode)" name="launch_prefix" value="gdb -ex run --args" />

<!-- ============ Run ============ -->
  <!-- Play data -->
  <arg name="rosbag_path" default="" /> 
  <arg name="wait" default="true"/>
  <node unless="$(eval arg('rosbag_path') is '')"
        name="player" pkg="rosbag" type="play" output="screen"
        args="-r 1.0 -s $(arg rosbag_skip_first_n_sec) -q --clock $(arg rosbag_path)" />

  <node pkg="panoptic_mapping_utils" name="player" type="flat_pointcloud_player.py" output="screen" 
    if="$(eval arg('rosbag_path') is '')">
    <param name="data_path" value="$(arg base_path)" />
    <param name="play_rate" value="$(arg play_rate)" />
    <param name="use_detectron" value="$(arg use_detectron)" />
    <param name="use_image_data" value="True"/>
    <param name="use_point_cloud" value="True"/>
    <param name="global_frame_name" value="$(arg global_frame_name)" />
    <param name="sensor_frame_name" value="$(arg sensor_frame_name)" />
    <param name="wait" value="$(arg wait)" />
    <param name="refresh_rate" value="$(arg data_player_refresh_rate)" />
    <remap from="~color_image" to="$(arg input_namespace)/color_image" />
    <remap from="~depth_image" to="$(arg input_namespace)/depth_image" />
    <remap from="~id_image" to="$(arg input_namespace)/segmentation_image" />
    <remap from="~labels" to="$(arg input_namespace)/segmentation_labels" />
    <remap from="~pose" to="$(arg input_namespace)/pose_ground_truth" />
    <remap from="/player/pose" to="/data/pose_ground_truth" />
    <remap from="/player/pointcloud" to="$(arg input_namespace)/pointcloud" />
    <param name="use_noise" value="$(arg use_noise)" />
    <rosparam command="load" file="$(find panoptic_mapping_ros)/config/mapper/$(arg config).yaml"/>
  </node>

  <!-- add noise to the data -->
  <node pkg="panoptic_mapping_utils" type="drift_generator_node" name="drift_generator" output="screen" if="$(arg use_noise)">
    <param name="noisy_pose_topic" value="$(arg input_namespace)/pose" />
    <param name="ground_truth_pose_topic" value="$(arg input_namespace)/pose_ground_truth" />
    <param name="generated_path_file_path" value="$(arg generated_path_file_path)" />
    <param name="global_frame_name" value="$(arg global_frame_name)" />
    <param name="sensor_frame_name" value="$(arg sensor_frame_name)" />
    <param name="use_tf_transforms" value="$(arg use_tf_transforms)" />
    <rosparam command="load" file="$(find panoptic_mapping_utils)/config/drift_$(arg drift_type).yaml" />
  </node>

  <!-- Mapper -->
  <node name="panoptic_mapper" pkg="panoptic_mapping_ros" type="panoptic_mapper_node" output="screen" 
   launch-prefix="$(arg launch_prefix)"><!--required="true"-->
    <!-- Config -->
    <rosparam file="$(find panoptic_mapping_ros)/config/mapper/$(arg config).yaml"/>
    <param name="shutdown_when_finished" value="$(arg shutdown_when_finished)" />
    <param name="save_map_path_when_finished" value="$(arg save_map_path_when_finished)"/>
    <param name="map_management/save_trajectory_on_finish" value="$(arg save_trajectory_on_finish)"/>
    <param name="map_management/save_voxgraph_trajectory_on_finish" value="$(arg save_voxgraph_trajectory_on_finish)"/>
    <param name="use_tf_transforms" value="$(arg use_tf_transforms)"/>
    <param name="tf_topic" value="$(arg input_namespace)/pose"/>
    <!-- Input -->
    <remap from="color_image_in" to="$(arg input_namespace)/color_image"/>
    <remap from="depth_image_in" to="$(arg input_namespace)/depth_image"/>
    <remap from="segmentation_image_in" to="$(arg input_namespace)/segmentation_image"/>
    <remap from="labels_in" to="$(arg input_namespace)/segmentation_labels"/>
    <param name="wait" value="true" />
  </node>

  <!-- voxblox to output submaps -->
  <node name="voxblox" pkg="voxblox_ros" type="tsdf_server" output="screen" args="-alsologtostderr" clear_params="true" if="$(arg use_noise)">
    <remap from="pointcloud" to="$(arg input_namespace)/pointcloud"/>
    <remap from="/transform" to="/data/pose"/>
    <param name="tsdf_voxel_size" value="0.05" />
    <param name="truncation_distance" value="0.5" />
    <param name="color_mode" value="colors" />
    <param name="enable_icp" value="False" />
    <param name="icp_refine_roll_pitch" value="false" />
    <param name="update_mesh_every_n_sec" value="1.0" />
    <param name="publish_submap_every_n_sec" value="6.0" />
    <param name="mesh_min_weight" value="2" />
    <param name="method" value="fast" />
    <param name="max_ray_length_m" value="10.0" />
    <param name="use_const_weight" value="true" />
    <param name="world_frame" value="world"/>
    <param name="use_tf_transforms" value="$(arg use_tf_transforms)"/>
    <param name="verbose" value="false" />
    <param name="pointcloud_queue_size" value="100" />
    <param name="pointcloud_deintegration_queue_length" value="120" />
    <!-- <param name="mesh_filename" value="$(find voxblox_ros)/mesh_results/$(anon basement).ply" /> -->
  </node>

  <!-- Map loader -->
  <node name="map_loader" pkg="panoptic_mapping_utils" type="map_loader.py" if="$(arg load_map)" output="screen">
    <param name="path" value="$(arg load_file)" />
    <param name="srv_name" value="/panoptic_mapper/load_map" />
    <param name="delay" value="0.1" />
  </node>

  <!-- Voxgraph -->
  <node name="voxgraph_mapper" pkg="voxgraph" type="voxgraph_mapping_node" output="screen">
    <rosparam file="$(find voxgraph)/config/voxgraph_mapper.yaml"/>
    <!-- <param name="submap_topic" value="/panoptic_mapper/background_submap_out" /> -->
    <param name="submap_topic" value="/voxblox/submap_out" />
  </node>

  <!-- RVIZ Visualization-->
  <group if="$(arg visualize)">
    <!-- <node type="rviz" name="rVizVoxgraph" pkg="rviz" output="screen" args="-d $(find voxgraph)/config/voxgraph_mapper.rviz" /> -->
    <node type="rviz" name="rviz" pkg="rviz" args="-d $(find panoptic_mapping_ros)/config/rviz/devel_with_voxgraph.rviz" output="screen"/>
  </group>


</launch>
