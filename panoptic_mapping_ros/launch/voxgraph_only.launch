<launch>
  <param name="use_sim_time" value="false" />

  <!-- <arg name="rosbag_path" default="/home/ioannis/datasets/basement/basement_dataset.bag" />  -->
  <arg name="rosbag_path" default="" /> 
  <arg name="load_map" default = "false"/>
  <arg name="load_file" default = "/home/ioannis/Documents/PanopticMapping/Data/maps/flat/run1.panmap"/>
  <arg name="pointcloud_topic"
       default="/player/pointcloud"
       doc="ROS topic for pointcloud input"/>
  <arg name="debug_mode"
       default="false"
       doc="Run the mapper in debug mode." />
  <arg name="show_rviz"
       default="true"
       doc="Automatically launch Rviz." />
  <arg name="config" default="flat_groundtruth"/> <!-- flat_groundtruth, flat_detectron, rio_groundtruth, rio_detectron, single_tsdf -->
  <arg name="rosbag_skip_first_n_sec"
       default="0"
       doc="Skip the first n seconds of the rosbag." />
  <arg name="global_frame_name"
       default="world" />
  <arg name="sensor_frame_name"
       default="camera" />
  <arg name="use_noise"
       default="true" />
  <arg name="drift_type" 
       default="severe"/>
  <arg name="use_tf_transforms"
       default="true"/>
  <arg name="enable_icp" 
       default="true"/>
  <arg name="base_path"
       default="/home/ioannis/datasets/large_flat/run1" />
  <arg name="play_rate"
       default="1"/>  <!-- Realtime factor -->
  <arg name="data_player_refresh_rate" default="100" />
  <arg name="generated_path_file_path" default="/home/ioannis/datasets/generated_path.txt"/>

  <!-- Play the rosbag, unless no path is specified -->
  <node unless="$(eval arg('rosbag_path') is '')"
        name="player" pkg="rosbag" type="play" output="screen"
        args="-r 1.0 -s $(arg rosbag_skip_first_n_sec) -q --clock $(arg rosbag_path)" />

  <node pkg="panoptic_mapping_utils" name="player" type="flat_pointcloud_player.py" output="screen" 
    if="$(eval arg('rosbag_path') is '')">
    <param name="data_path" value="$(arg base_path)" />
    <param name="play_rate" value="$(arg play_rate)" />
    <param name="global_frame_name" value="$(arg global_frame_name)" />
    <param name="sensor_frame_name" value="$(arg sensor_frame_name)" />
    <param name="refresh_rate" value="$(arg data_player_refresh_rate)" />
    <remap from="/player/pose" to="/data/pose_ground_truth"/>
    <param name="use_image_data" value="False"/>
    <param name="use_point_cloud" value="True"/>
    <param name="use_noise" value="$(arg use_noise)"/>
    <rosparam command="load" file="$(find panoptic_mapping_ros)/config/mapper/$(arg config).yaml"/>
  </node>

  <!-- Map loader -->
  <node name="map_loader" pkg="panoptic_mapping_utils" type="map_loader.py" if="$(arg load_map)" output="screen">
     <param name="path" value="$(arg load_file)" /> 
     <param name="srv_name" value="/panoptic_mapper/load_map" /> 
     <param name="delay" value="0.1" /> 
  </node>

  <!-- Run voxblox in sliding window mode -->
  <group>
  <!-- voxblox publish submaps if there are subscribers -->
  <node name="voxblox" pkg="voxblox_ros" type="tsdf_server" output="screen" args="-alsologtostderr" clear_params="true" if="$(arg use_noise)">
    <remap from="pointcloud" to="$(arg pointcloud_topic)"/>
    <remap from="/transform" to="/data/pose" if="$(arg use_noise)" />
    <remap from="/transform" to="/player/pose" unless="$(arg use_noise)"/>
    <param name="use_tf_transforms" value="$(arg use_tf_transforms)"/>
    <param name="enable_icp" value="$(arg enable_icp)" />
    <rosparam command="load" file="$(find panoptic_mapping_utils)/config/voxblox/voxblox_temporal_window.yaml" />
    <!-- <param name="mesh_filename" value="$(find voxblox_ros)/mesh_results/$(anon basement).ply" /> -->
  </node>
  <!-- add noise to the data -->
  <node pkg="panoptic_mapping_utils" type="drift_generator_node" name="drift_generator" output="screen" if="$(arg use_noise)">
    <param name="noisy_pose_topic" value="/data/pose" />
    <param name="ground_truth_pose_topic" value="/data/pose_ground_truth" />
    <param name="generated_path_file_path" value="$(arg generated_path_file_path)" />
    <param name="global_frame_name" value="$(arg global_frame_name)" />
    <param name="sensor_frame_name" value="$(arg sensor_frame_name)" />
    <param name="use_tf_transforms" value="$(arg use_tf_transforms)"/>
    <rosparam command="load" file="$(find panoptic_mapping_utils)/config/drift_$(arg drift_type).yaml" />
  </node>
  </group>

  <!-- Run voxgraph, subscribing to voxblox's sliding window -->
  <group>
    <arg unless="$(arg debug_mode)" name="launch_prefix" value="" />
    <arg if="$(arg debug_mode)" name="launch_prefix" value="gdb -ex run --args" />

    <node name="voxgraph_mapper" pkg="voxgraph" type="voxgraph_mapping_node"
          output="screen" launch-prefix="$(arg launch_prefix)">
      <rosparam file="$(find voxgraph)/config/voxgraph_mapper.yaml" />
      <param name="submap_topic" value="/voxblox/submap_out" />
    </node>
  </group>

  <!-- Show Rviz -->
  <group if="$(arg show_rviz)">
    <arg name="rviz_file" default="$(find voxgraph)/config/voxgraph_mapper.rviz" />
    <node pkg="rviz" type="rviz" name="$(anon rviz)" output="screen"
          args="-d $(arg rviz_file)" />
  </group>

</launch>